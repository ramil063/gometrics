// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ramil063/gometrics/cmd/server/storage/db/dml (interfaces: DataBaser)

// Package db is a generated GoMock package.
package db

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataBaser is a mock of DataBaser interface.
type MockDataBaser struct {
	ctrl     *gomock.Controller
	recorder *MockDataBaserMockRecorder
}

// MockDataBaserMockRecorder is the mock recorder for MockDataBaser.
type MockDataBaserMockRecorder struct {
	mock *MockDataBaser
}

// NewMockDataBaser creates a new mock instance.
func NewMockDataBaser(ctrl *gomock.Controller) *MockDataBaser {
	mock := &MockDataBaser{ctrl: ctrl}
	mock.recorder = &MockDataBaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataBaser) EXPECT() *MockDataBaserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDataBaser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDataBaserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataBaser)(nil).Close))
}

// ExecContext mocks base method.
func (m *MockDataBaser) ExecContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDataBaserMockRecorder) ExecContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDataBaser)(nil).ExecContext), varargs...)
}

// Open mocks base method.
func (m *MockDataBaser) Open() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockDataBaserMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDataBaser)(nil).Open))
}

// PingContext mocks base method.
func (m *MockDataBaser) PingContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockDataBaserMockRecorder) PingContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockDataBaser)(nil).PingContext), arg0)
}

// SetDatabase mocks base method.
func (m *MockDataBaser) SetDatabase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDatabase")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDatabase indicates an expected call of SetDatabase.
func (mr *MockDataBaserMockRecorder) SetDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatabase", reflect.TypeOf((*MockDataBaser)(nil).SetDatabase))
}
